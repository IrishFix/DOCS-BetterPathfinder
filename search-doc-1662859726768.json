[{"title":"BetterPathfinder","type":0,"sectionRef":"#","url":"api/BetterPathfinder","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"BetterPathfinder","url":"api/BetterPathfinder#types","content":" "},{"title":"t_WaypointAction​","type":1,"pageTitle":"BetterPathfinder","url":"api/BetterPathfinder#t_WaypointAction","content":"&lt;/&gt; type t_WaypointAction = { None: &quot;n&quot;, Jump: &quot;j&quot; }   "},{"title":"i_State​","type":1,"pageTitle":"BetterPathfinder","url":"api/BetterPathfinder#i_State","content":"&lt;/&gt; interface i_State { Running: &quot;r&quot;-- A PathBody will enter this state if it is currently performing a pathfind operation. Idle: &quot;i&quot;-- A PathBody will enter this state if it is not currently performing any operation. Failed: &quot;f&quot;-- This state will be passed through the SolveEnded signal upon pathfind failure. Succeeded: &quot;s&quot;-- This state will be passed through the SolveEnded signal upon pathfind success. Cancelled: &quot;c&quot;-- This state will be passed through the SolveEnded signal upon pathfind cancellation. }  "},{"title":"Properties​","type":1,"pageTitle":"BetterPathfinder","url":"api/BetterPathfinder#properties","content":" "},{"title":"WaypointAction​","type":1,"pageTitle":"BetterPathfinder","url":"api/BetterPathfinder#WaypointAction","content":"&lt;/&gt; BetterPathfinder.WaypointAction: t_WaypointAction WaypointAction is an Enum-like table that stores the action types for the Waypoints generated by the pathfinder.  "},{"title":"State​","type":1,"pageTitle":"BetterPathfinder","url":"api/BetterPathfinder#State","content":"&lt;/&gt; BetterPathfinder.State: i_State State is an Enum-like table that stores the state types that the BetterPathfinder.i_PathBody may enter or pass through events upon certain operation milestones. "},{"title":"Functions​","type":1,"pageTitle":"BetterPathfinder","url":"api/BetterPathfinder#functions","content":" "},{"title":"CreatePathBody​","type":1,"pageTitle":"BetterPathfinder","url":"api/BetterPathfinder#CreatePathBody","content":"&lt;/&gt; BetterPathfinder:CreatePathBody( PathBodyInfoTable: i_PathBodyInfoTable-- This is the PathBodyInfoTable that will influence this BetterPathfinder.i_PathBody and all of its pathfinding operations. ) → i_PathBody "},{"title":"Types","type":1,"pageTitle":"BetterPathfinder","url":"api/BetterPathfinder##","content":""},{"title":"​","type":1,"pageTitle":"BetterPathfinder","url":"api/BetterPathfinder#i_PathBodyInfoTable","content":"interface i_PathBodyInfoTable { AgentRadius: number-- DEFAULT: 3; This is the radius at which the BetterPathfinder.i_PathBody will ensure fits through all waypoints it makes. AgentHeight: number-- DEFAULT: 6; This is the height at which the BetterPathfinder.i_PathBody will ensure fits through all waypoints it makes. AgentCanJump: boolean-- DEFAULT: false; This decides whether the BetterPathfinder.i_PathBody will create waypoints that require the agent to jump to get to. AgentJumpHeight: number-- DEFAULT: 7.2; This is the height at which the BetterPathfinder.i_PathBody will allow its jump waypoints to go upwards off of the ground. AgentJumpDistance: number-- DEFAULT: 5; This is the distance at which the BetterPathfinder.i_PathBody will allow its waypoints to go above no ground. WaypointSpacing: number-- DEFAULT: 3; This is the spacing in studs at which the BetterPathfinder.i_PathBody will distance its waypoints from eachother. IgnoreObjects: {Instance }-- DEFAULT: {}; This is a table that will store all Instances you wish to ignore collision with during a pathfinding operation. Timeout: number-- DEFAULT: 10; This is how long a pathfinding operation will run for until ending with failure. MaterialCosts: {[Material ]: number}-- DEFAULT: {}; This is a table of which the key is a Material EnumItem, and the value is a number that indicates how costly it is to traverse across said Material surface. RegionCosts: {[{ CFrame: CFrame , Size: Vector3 , Shape: PartType }]: number} | {[Instance ]: number}-- DEFAULT: {}; This is a table of which the key is a Instance or a table with a &quot;Size&quot; (Vector3), &quot;CFrame&quot; (CFrame) and &quot;Shape&quot; (PartType EnumItem), and the value is a number that indicates how costly it is to traverse through the set area or part bounds. }  "},{"title":"​","type":1,"pageTitle":"BetterPathfinder","url":"api/BetterPathfinder#i_PathBody","content":"interface i_PathBody { SolveEnded: FastSignal-- This signal will fire every time the PathBody finishes a pathfinding operation, passing through the State that it ended on. SolveBegan: FastSignal-- This signal will fire every time the PathBody begins a pathfinding operation. WaypointBlocked: FastSignal-- This signal will fire every time the PathBody detects a waypoint within its path has been blocked (Only fires if a pathfinding operation has been run and has succeeded). WaypointUnBlocked: FastSignal-- This signal will fire every time the PathBody detects a waypoint within its path that was blocked, has been unblocked (Only fires if a pathfinding operation has had a blocked waypoint). Visuals: Instance? -- This is a Folder that stores all of the visualisations of this PathBody's current path. (Will be nil unless BetterPathfinder:VisualisePath has been called at least once after a successful pathfinding operation. }  This method generates a BetterPathfinder.i_PathBody that will be used with the following methods in order to run all pathfinding operations.  "},{"title":"SendAgentDownPath​","type":1,"pageTitle":"BetterPathfinder","url":"api/BetterPathfinder#SendAgentDownPath","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; BetterPathfinder:SendAgentDownPath(AgentModel: Model ) → () Moves the agent passed in down the waypoints created by the last pathfinding operation.  "},{"title":"IntersectAgentDownPath​","type":1,"pageTitle":"BetterPathfinder","url":"api/BetterPathfinder#IntersectAgentDownPath","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; BetterPathfinder:IntersectAgentDownPath(AgentModel: Model ) → () Moves the agent passed in down the waypoints created by the last pathfinding operation; starting at the nearest point to the agent.  "},{"title":"Cancel​","type":1,"pageTitle":"BetterPathfinder","url":"api/BetterPathfinder#Cancel","content":"&lt;/&gt; BetterPathfinder:Cancel() → () Cancels the currently running pathfind operation (if there is one).  "},{"title":"GetWaypoints​","type":1,"pageTitle":"BetterPathfinder","url":"api/BetterPathfinder#GetWaypoints","content":"&lt;/&gt; BetterPathfinder:GetWaypoints() → {Waypoint} Returns an ordered table of the waypoints created in the last pathfinding operation to be used in a custom method.  "},{"title":"VisualisePath​","type":1,"pageTitle":"BetterPathfinder","url":"api/BetterPathfinder#VisualisePath","content":"&lt;/&gt; BetterPathfinder:VisualisePath() → () Generates a visualisation for all the waypoints generated in the most recent pathfinding operation.  "},{"title":"DeVisualisePath​","type":1,"pageTitle":"BetterPathfinder","url":"api/BetterPathfinder#DeVisualisePath","content":"&lt;/&gt; BetterPathfinder:DeVisualisePath() → () Clears all of the currently visualised waypoints.  "},{"title":"SolveAsync​","type":1,"pageTitle":"BetterPathfinder","url":"api/BetterPathfinder#SolveAsync","content":"&lt;/&gt; BetterPathfinder:SolveAsync( PathingFrom: Vector3 ,-- The position that the BetterPathfinder.i_PathBody will use in the pathfinding operation as the start point. PathingTo: Vector3 -- The position that the BetterPathfinder.i_PathBody will use in the pathfinding operation as the goal point. ) → () This is the method that can be called on a BetterPathfinder.i_PathBody in order to initialise a pathfinding operation. "}]